<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FluentPanel_Display_Key" xml:space="preserve">
    <value>Fluent Panel</value>
    <comment>Name of the Panel control.</comment>
  </data>
  <data name="FluentPanel_Desc_Key" xml:space="preserve">
    <value>Fluent Panel for custom page and canvas app</value>
    <comment>Description of the Panel control.</comment>
  </data>
  <data name="FluentPanel_HeaderText" xml:space="preserve">
    <value>Header Text</value>
    <comment>Name of the property that specifies Header Text.</comment>
  </data>
  <data name="FluentPanel_IsOpen" xml:space="preserve">
    <value>Is Open</value>
    <comment>Name of the property that specifies Is Open.</comment>
  </data>
  <data name="FluentPanel_PanelType" xml:space="preserve">
    <value>Panel Type</value>
    <comment>Name of the property that specifies Panel Type.</comment>
  </data>
  <data name="FluentPanel_SmallFluid" xml:space="preserve">
    <value>Small Fluid</value>
    <comment>Name of the property that specifies Small Fluid.</comment>
  </data>
  <data name="FluentPanel_SmallFixedFar" xml:space="preserve">
    <value>Small FixedFar</value>
    <comment>Name of the property that specifies Small FixedFar.</comment>
  </data>
  <data name="FluentPanel_SmallFixedNear" xml:space="preserve">
    <value>Small FixedNear</value>
    <comment>Name of the property that specifies Small FixedNear.</comment>
  </data>
  <data name="FluentPanel_Medium" xml:space="preserve">
    <value>Medium</value>
    <comment>Name of the property that specifies Medium.</comment>
  </data>
  <data name="FluentPanel_Large" xml:space="preserve">
    <value>Large</value>
    <comment>Name of the property that specifies Large.</comment>
  </data>
  <data name="FluentPanel_ExtraLarge" xml:space="preserve">
    <value>Extra Large</value>
    <comment>Name of the property that specifies Extra Large.</comment>
  </data>
  <data name="FluentPanel_Custom" xml:space="preserve">
    <value>Custom</value>
    <comment>Name of the property that specifies Custom.</comment>
  </data>
  <data name="FluentPanel_CustomNear" xml:space="preserve">
    <value>Custom Near</value>
    <comment>Name of the property that specifies Custom Near.</comment>
  </data>
  <data name="FluentPanel_SaveButtonName" xml:space="preserve">
    <value>Save Button Name</value>
    <comment>Name of the property that specifies Save Button Name.</comment>
  </data>
  <data name="FluentPanel_CancelButtonName" xml:space="preserve">
    <value>Cancel Button Name</value>
    <comment>Name of the property that specifies Cancel Button Name.</comment>
  </data>
  <data name="FluentPanel_ContentWidth" xml:space="preserve">
    <value>Content Width</value>
    <comment>Name of the property that specifies Content Width.</comment>
  </data>
  <data name="FluentPanel_ContentHeight" xml:space="preserve">
    <value>Content Height</value>
    <comment>Name of the property that specifies Content Height.</comment>
  </data>
  <data name="FluentPanel_CustomWidth" xml:space="preserve">
    <value>Custom Width</value>
    <comment>Name of the property that specifies Custom Width.</comment>
  </data>
  <data name="FluentPanel_Theme" xml:space="preserve">
    <value>Theme</value>
    <comment>Name of the property that specifies Theme.</comment>
  </data>
  <data name="FluentPanel_HasCloseButton" xml:space="preserve">
    <value>Has Close Button</value>
    <comment>Name of the property that specifies Has Close Button.</comment>
  </data>
  <data name="FluentPanel_TrapPanel" xml:space="preserve">
    <value>Trap Panel</value>
    <comment>Name of the property that specifies Trap Panel.</comment>
  </data>
  <data name="FluentPanel_IsLightDismiss" xml:space="preserve">
    <value>Is Light Dismiss</value>
    <comment>Name of the property that specifies Is Light Dismiss.</comment>
  </data>
  <data name="FluentPanel_IsHiddenOnDismiss" xml:space="preserve">
    <value>Is Hidden OnDismiss</value>
    <comment>Name of the property that specifies Is Hidden OnDismiss.</comment>
  </data>
  <data name="FluentPanel_IsBlocking" xml:space="preserve">
    <value>Is Blocking</value>
    <comment>Name of the property that specifies Is Blocking.</comment>
  </data>
  <data name="FluentPanel_IsFooterAtBottom" xml:space="preserve">
    <value>Is Footer At Bottom</value>
    <comment>Name of the property that specifies Is Footer At Bottom.</comment>
  </data>
  <data name="FluentPanel_ShowBorder" xml:space="preserve">
    <value>Show Border</value>
    <comment>Name of the property that specifies Show Border.</comment>
  </data>
  <data name="FluentPanel_ShowFooterButton" xml:space="preserve">
    <value>Show Footer Button</value>
    <comment>Name of the property that specifies Show Footer Button.</comment>
  </data>
  <data name="FluentPanel_ShowSaveButton" xml:space="preserve">
    <value>Show Save Button</value>
    <comment>Name of the property that specifies Show Save Button.</comment>
  </data>
  <data name="FluentPanel_ShowCancelButton" xml:space="preserve">
    <value>Show Cancel Button</value>
    <comment>Name of the property that specifies Show Cancel Button.</comment>
  </data>
  <data name="FluentPanel_DisableSaveButton" xml:space="preserve">
    <value>Disable Save Button</value>
    <comment>Name of the property that specifies Disable Save Button.</comment>
  </data>
  <data name="FluentPanel_DisableCancelButton" xml:space="preserve">
    <value>Disable Cancel Button</value>
    <comment>Name of the property that specifies Disable Cancel Button.</comment>
  </data>
  <data name="FluentPanel_TriggerEvent" xml:space="preserve">
    <value>Trigger Event</value>
    <comment>Name of the property that specifies Trigger Event.</comment>
  </data>
</root>